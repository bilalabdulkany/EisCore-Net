using System;
using Apache.NMS;
using Apache.NMS.AMQP;


namespace eis_core.Sub.Model
{ 
    public delegate void MessageReceivedDelegate(string message);
    public class EventConsumerControlProcessor : IDisposable
    {
        private readonly IConnectionFactory connectionFactory;
        private readonly IConnection connection;
        private readonly ISession session;
        private readonly IMessageConsumer consumer;
        private bool isDisposed = false;
        public event MessageReceivedDelegate OnMessageReceived;


         public EventConsumerControlProcessor(string queueName, string brokerUri, string clientId)
        {
            //this.queueName = queueName;
            this.connectionFactory = new NMSConnectionFactory(brokerUri);
            this.connection = this.connectionFactory.CreateConnection();
            this.connection.ClientId = clientId;
            this.connection.Start();
            this.session = connection.CreateSession();
            NmsQueue queue = new NmsQueue(queueName);
            this.consumer = this.session.CreateConsumer(queue, "2 > 1", false);
            this.consumer.Listener += new MessageListener(OnMessage);

        }


    /*     public EventConsumerControlProcessor(string topicName, string brokerUri, string clientId, string consumerId)
        {
            this.topicName = topicName;
            this.connectionFactory = new ConnectionFactory(brokerUri);
            this.connection = this.connectionFactory.CreateConnection();
            this.connection.ClientId = clientId;
            this.connection.Start();
            this.session = connection.CreateSession();
            ActiveMQTopic topic = new ActiveMQTopic(topicName);
            this.consumer = this.session.CreateDurableConsumer(topic, consumerId, "2 > 1", false);
            this.consumer.Listener += new MessageListener(OnMessage);

        }
        */

        public void OnMessage(IMessage message)
        {
            //IMessage textMessage = this.consumer.ReceiveNoWait();
            Message textMessage = message;;
            if (this.OnMessageReceived != null)
            {
                this.OnMessageReceived(message.GetBody<EisEvent>());
            }
        }

        #region IDisposable Members

        public void Dispose()
        {
            if (!this.isDisposed)
            {
                this.consumer.Dispose();
                this.session.Dispose();
                this.connection.Dispose();
                this.isDisposed = true;
            }
        }
        #endregion

    }
}